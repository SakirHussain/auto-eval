Q 
The city council plans to develop a mobile app to enhance urban mobility by providing residents with information on public transport, bike-sharing, and ride-hailing options. Due to changing transportation policies and user needs, the app’s requirements are evolving. With a limited budget and the need for a quick release, the council aims to roll out features in phases, starting with essential transport information and later adding real-time updates and payment integration.
a. How will you implement the Agile process model for the above scenario ? (5 Marks)
b. Discuss how eXtreme Programming (XP) can support the development of the mobile app.(5 Marks)

SA
Part(a) Agile is philosophy that revolves around agility in software development and customer satisfaction.
It involves integrating the customer to be a part of the development team in order to recueve quick feedback and fast implementations.
In the case of a mobile application in improve urban mobility, we will rely on building the application in increments. This will require the application to have high modularity.
The modules can be as follows : bikesharing, ride hailing, proximity radar, ride selection/scheduling.
The bike sharing and ride hailing modules are mainly UI based and can be developed in one sprint. The feedback can be obtained from a select group of citizens or lauch a test application in beta state to all phones.
The core logic - proximity radar, to define how close or far awat te application must look for a ride and ride selection is all about selecting a ride for the user without clashing with other users.
This is developed in subsequent sprint cycles and can be tested by limited area lauch to citizens to bring out all the runtime errors and bugs.

Part(b) eXtreme progreamming relies on maily very fast development and mazimizing customer satisfaction.
Since quick release is important along with subsequent rollouts this is a good SDLC model.
The plannig is the first phase of the SDLC model. Here the requirements, need not be rigid or well defined or even formally defined. The requirements are communicated roughly and the production can begin. Here a ride application with public transport, bike sharing and ride hailing.
Based on this alone, the architecture/software architecture can be obtained.
Once the software architecture is defined for the interation, the coding/implementation begins.
Coding is usually pair programming. The modules selected such as UI, bikesharing, ride hailing and public transport are developed.
Once they are developed, they are tested agasint the member of the team or in this case a public jury/citizen jury is used to check the appeal of the UI.
If it is satisfactory, the component is completed and implemented into the application, if not, the feedback is sent as an input for the next iteration and the process is repeated again.

R
Part (a)
1. Understanding of Agile Principles - Demonstrates knowledge of Agile philosophy, especially iterative development, frequent feedback, and flexibility in requirements. (1 Mark)
2. Incremental Feature Rollout - Explains how the app will be developed in modular increments (e.g., starting with essential features, then adding real-time updates).(1 Mark)
3. Customer/Stakeholder Involvement - Describes how feedback will be gathered from users (e.g., beta testers, select groups of citizens) and incorporated into each iteration.(1 Mark)
4. Sprint/Iteration Structure -	Outlines how sprints are organized, how tasks are prioritized, and how progress is evaluated at the end of each sprint.(1 Mark)
5. Practical Application - Provides a clear plan linking specific modules (transport info, bike-sharing, ride-hailing) to Agile principles and shows feasibility.(1 Mark)

Part (b)
1. Understanding of XP Principles -	Demonstrates knowledge of XP’s core tenets (rapid releases, pair programming, test-driven development, refactoring, continuous integration, etc.). (1 Mark)
2. Alignment with Project Requirements - Explains how XP supports quick releases, evolving requirements, and user-centric development for the mobility application.	(1 Mark)
3. Customer Collaboration -	Addresses how XP’s customer involvement, frequent feedback loops, and user stories help refine and validate features (e.g., UI reviews, real-time feedback). (1 Mark)
4. Development Practices - Shows understanding of XP methods (pair programming, small releases, simple design) in the context of the planned modules (bike-sharing, ride-hailing). (1 Mark)
5. Testing & Continuous Improvement - Describes how continuous testing, rapid iteration, and refactoring maintain code quality and adapt the app to changing policies.	(1 Mark)
